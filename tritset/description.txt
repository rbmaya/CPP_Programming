Стандартная библиотека содержит std::bitset и специализацию шаблона std::vector<bool> для эффективного хранения и обработки большого объема данных для битов и bool. Наша задача реализовать контейнер для компактного хранения значения множества тритов. Трит аналог бита в Троичной системе счисления. Для симметричной троичной системы его можно определить как {False, Unknown, True} или {-1, 0, 1}  (Логики Клини и Приста соответственно).
Для хранения одного трита достаточно 2 битов. Поэтому контейнеры из std неэффективно расходуют память для хранения тритов. Наш контейнер должен реализовать динамическое управление массивом типа uint[] для хранения тритов. Код должен учитывать что uint может быть разным на разных платформах. При обращении к неустановленным тритам чтение должно возвращать значение Unknown, а запись Unknown не приводить к выделению памяти для хранения данных.
Реализовать перегрузку операций AND, OR, NOT с расширением результата для хранения необходимых данных. Дополнительно реализовать методы:

//число установленных в данное значение тритов
//для трита Unknown - число значений Unknown до последнего установленного трита
size_t cardinality(Trit value);
//аналогично но сразу для всех типов тритов
std::unordered_map< Trit, int, std::hash<int> > cardinality();

// забыть содержимое от lastIndex и дальше
void trim(size_t lastIndex);
// logical length - индекс последнего не Unknown трита +1
size_t length();



Для проверки корректности работы необходимо покрыть unit test-ами все публичные методы и операторы.
В качестве библиотеки для тестирования использовать Google Test Framework (https://ru.wikipedia.org/wiki/Google_C%2B%2B_Testing_Framework)
http://www.ibm.com/developerworks/aix/library/au-googletestingframework.html
